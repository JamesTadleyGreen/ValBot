# coding: utf-8
#
# Created by David Hargat.
# Copyright Â© 2017 Giphy. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""
    giphy-api

    Giphy's public api.

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def gifs_categories_category_get(self, api_key, category, **kwargs):
        """
        Category Tags Endpoint.
        Returns a list of tags for a given category. NOTE `limit` and `offset` must both be set; otherwise they're ignored.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_categories_category_get(api_key, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str category: Filters results by category. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_categories_category_get_with_http_info(api_key, category, **kwargs)
        else:
            (data) = self.gifs_categories_category_get_with_http_info(api_key, category, **kwargs)
            return data

    def gifs_categories_category_get_with_http_info(self, api_key, category, **kwargs):
        """
        Category Tags Endpoint.
        Returns a list of tags for a given category. NOTE `limit` and `offset` must both be set; otherwise they're ignored.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_categories_category_get_with_http_info(api_key, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str category: Filters results by category. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'category', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_categories_category_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_categories_category_get`")
        # verify the required parameter 'category' is set
        if ('category' not in params) or (params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `gifs_categories_category_get`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_categories_category_get`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_categories_category_get`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 100:
            raise ValueError("Invalid value for parameter `offset` when calling `gifs_categories_category_get`, must be a value less than or equal to `100`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `gifs_categories_category_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/gifs/categories/{category}'.replace('{format}', 'json')
        path_params = {}
        if 'category' in params:
            path_params['category'] = params['category']

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_categories_category_tag_get(self, api_key, category, tag, **kwargs):
        """
        Tagged Gifs Endpoint.
        Returns a list of gifs for a given tag (alias to `/gif/search`).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_categories_category_tag_get(api_key, category, tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str category: Filters results by category. (required)
        :param str tag: Filters results by tag. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_categories_category_tag_get_with_http_info(api_key, category, tag, **kwargs)
        else:
            (data) = self.gifs_categories_category_tag_get_with_http_info(api_key, category, tag, **kwargs)
            return data

    def gifs_categories_category_tag_get_with_http_info(self, api_key, category, tag, **kwargs):
        """
        Tagged Gifs Endpoint.
        Returns a list of gifs for a given tag (alias to `/gif/search`).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_categories_category_tag_get_with_http_info(api_key, category, tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str category: Filters results by category. (required)
        :param str tag: Filters results by tag. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'category', 'tag', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_categories_category_tag_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_categories_category_tag_get`")
        # verify the required parameter 'category' is set
        if ('category' not in params) or (params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `gifs_categories_category_tag_get`")
        # verify the required parameter 'tag' is set
        if ('tag' not in params) or (params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `gifs_categories_category_tag_get`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_categories_category_tag_get`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_categories_category_tag_get`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 100:
            raise ValueError("Invalid value for parameter `offset` when calling `gifs_categories_category_tag_get`, must be a value less than or equal to `100`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `gifs_categories_category_tag_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/gifs/categories/{category}/{tag}'.replace('{format}', 'json')
        path_params = {}
        if 'category' in params:
            path_params['category'] = params['category']
        if 'tag' in params:
            path_params['tag'] = params['tag']

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2005',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_categories_get(self, api_key, **kwargs):
        """
        Categories Endpoint.
        Returns a list of categories.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_categories_get(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param int limit: The maximum number of records to return.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_categories_get_with_http_info(api_key, **kwargs)
        else:
            (data) = self.gifs_categories_get_with_http_info(api_key, **kwargs)
            return data

    def gifs_categories_get_with_http_info(self, api_key, **kwargs):
        """
        Categories Endpoint.
        Returns a list of categories.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_categories_get_with_http_info(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param int limit: The maximum number of records to return.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_categories_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_categories_get`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_categories_get`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_categories_get`, must be a value greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/gifs/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_get(self, api_key, ids, **kwargs):
        """
        Get GIFs by ID Endpoint
        A multiget version of the get GIF by ID endpoint.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_get(api_key, ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str ids: Filters results by specified GIF IDs, separated by commas. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_get_with_http_info(api_key, ids, **kwargs)
        else:
            (data) = self.gifs_get_with_http_info(api_key, ids, **kwargs)
            return data

    def gifs_get_with_http_info(self, api_key, ids, **kwargs):
        """
        Get GIFs by ID Endpoint
        A multiget version of the get GIF by ID endpoint.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_get_with_http_info(api_key, ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str ids: Filters results by specified GIF IDs, separated by commas. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_get`")
        # verify the required parameter 'ids' is set
        if ('ids' not in params) or (params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `gifs_get`")


        collection_formats = {}

        resource_path = '/gifs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'ids' in params:
            query_params['ids'] = params['ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_gif_id_get(self, api_key, gif_id, **kwargs):
        """
        Get GIF by ID Endpoint
        Returns a GIF given that GIF's unique ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_gif_id_get(api_key, gif_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str gif_id: Filters results by specified GIF ID. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_gif_id_get_with_http_info(api_key, gif_id, **kwargs)
        else:
            (data) = self.gifs_gif_id_get_with_http_info(api_key, gif_id, **kwargs)
            return data

    def gifs_gif_id_get_with_http_info(self, api_key, gif_id, **kwargs):
        """
        Get GIF by ID Endpoint
        Returns a GIF given that GIF's unique ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_gif_id_get_with_http_info(api_key, gif_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str gif_id: Filters results by specified GIF ID. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'gif_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_gif_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_gif_id_get`")
        # verify the required parameter 'gif_id' is set
        if ('gif_id' not in params) or (params['gif_id'] is None):
            raise ValueError("Missing the required parameter `gif_id` when calling `gifs_gif_id_get`")


        collection_formats = {}

        resource_path = '/gifs/{gif_id}'.replace('{format}', 'json')
        path_params = {}
        if 'gif_id' in params:
            path_params['gif_id'] = params['gif_id']

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_random_get(self, api_key, **kwargs):
        """
        Random Endpoint
        Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_random_get(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str tag: Filters results by specified tag.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_random_get_with_http_info(api_key, **kwargs)
        else:
            (data) = self.gifs_random_get_with_http_info(api_key, **kwargs)
            return data

    def gifs_random_get_with_http_info(self, api_key, **kwargs):
        """
        Random Endpoint
        Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_random_get_with_http_info(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str tag: Filters results by specified tag.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'tag', 'rating', 'fmt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_random_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_random_get`")


        collection_formats = {}

        resource_path = '/gifs/random'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'rating' in params:
            query_params['rating'] = params['rating']
        if 'fmt' in params:
            query_params['fmt'] = params['fmt']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_search_get(self, api_key, q, **kwargs):
        """
        Search Endpoint
        Search all Giphy GIFs for a word or phrase. Punctuation will be stripped and ignored. Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_search_get(api_key, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str q: Search query term or prhase. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :param str rating: Filters results by specified rating.
        :param str lang: Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages <a href = \"../language-support\">here</a>.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_search_get_with_http_info(api_key, q, **kwargs)
        else:
            (data) = self.gifs_search_get_with_http_info(api_key, q, **kwargs)
            return data

    def gifs_search_get_with_http_info(self, api_key, q, **kwargs):
        """
        Search Endpoint
        Search all Giphy GIFs for a word or phrase. Punctuation will be stripped and ignored. Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_search_get_with_http_info(api_key, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str q: Search query term or prhase. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :param str rating: Filters results by specified rating.
        :param str lang: Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages <a href = \"../language-support\">here</a>.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'q', 'limit', 'offset', 'rating', 'lang', 'fmt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_search_get`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `gifs_search_get`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_search_get`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_search_get`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 100:
            raise ValueError("Invalid value for parameter `offset` when calling `gifs_search_get`, must be a value less than or equal to `100`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `gifs_search_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/gifs/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'q' in params:
            query_params['q'] = params['q']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'rating' in params:
            query_params['rating'] = params['rating']
        if 'lang' in params:
            query_params['lang'] = params['lang']
        if 'fmt' in params:
            query_params['fmt'] = params['fmt']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_translate_get(self, api_key, s, **kwargs):
        """
        Translate Endpoint
        The translate API draws on search, but uses the Giphy `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_translate_get(api_key, s, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str s: Search term. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_translate_get_with_http_info(api_key, s, **kwargs)
        else:
            (data) = self.gifs_translate_get_with_http_info(api_key, s, **kwargs)
            return data

    def gifs_translate_get_with_http_info(self, api_key, s, **kwargs):
        """
        Translate Endpoint
        The translate API draws on search, but uses the Giphy `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_translate_get_with_http_info(api_key, s, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str s: Search term. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 's']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_translate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_translate_get`")
        # verify the required parameter 's' is set
        if ('s' not in params) or (params['s'] is None):
            raise ValueError("Missing the required parameter `s` when calling `gifs_translate_get`")


        collection_formats = {}

        resource_path = '/gifs/translate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 's' in params:
            query_params['s'] = params['s']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gifs_trending_get(self, api_key, **kwargs):
        """
        Trending GIFs Endpoint
        Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team. The data returned mirrors the GIFs showcased on the <a href = \"http://www.giphy.com\">GIPHY homepage</a>. Returns 25 results by default.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_trending_get(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param int limit: The maximum number of records to return.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gifs_trending_get_with_http_info(api_key, **kwargs)
        else:
            (data) = self.gifs_trending_get_with_http_info(api_key, **kwargs)
            return data

    def gifs_trending_get_with_http_info(self, api_key, **kwargs):
        """
        Trending GIFs Endpoint
        Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team. The data returned mirrors the GIFs showcased on the <a href = \"http://www.giphy.com\">GIPHY homepage</a>. Returns 25 results by default.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gifs_trending_get_with_http_info(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param int limit: The maximum number of records to return.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'limit', 'rating', 'fmt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gifs_trending_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `gifs_trending_get`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_trending_get`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `gifs_trending_get`, must be a value greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/gifs/trending'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'rating' in params:
            query_params['rating'] = params['rating']
        if 'fmt' in params:
            query_params['fmt'] = params['fmt']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stickers_random_get(self, api_key, **kwargs):
        """
        Random Sticker Endpoint
        Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_random_get(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str tag: Filters results by specified tag.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stickers_random_get_with_http_info(api_key, **kwargs)
        else:
            (data) = self.stickers_random_get_with_http_info(api_key, **kwargs)
            return data

    def stickers_random_get_with_http_info(self, api_key, **kwargs):
        """
        Random Sticker Endpoint
        Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_random_get_with_http_info(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str tag: Filters results by specified tag.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'tag', 'rating', 'fmt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stickers_random_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `stickers_random_get`")


        collection_formats = {}

        resource_path = '/stickers/random'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'rating' in params:
            query_params['rating'] = params['rating']
        if 'fmt' in params:
            query_params['fmt'] = params['fmt']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stickers_search_get(self, api_key, q, **kwargs):
        """
        Sticker Search Endpoint
        Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_search_get(api_key, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str q: Search query term or prhase. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :param str rating: Filters results by specified rating.
        :param str lang: Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages <a href = \"../language-support\">here</a>.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stickers_search_get_with_http_info(api_key, q, **kwargs)
        else:
            (data) = self.stickers_search_get_with_http_info(api_key, q, **kwargs)
            return data

    def stickers_search_get_with_http_info(self, api_key, q, **kwargs):
        """
        Sticker Search Endpoint
        Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_search_get_with_http_info(api_key, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str q: Search query term or prhase. (required)
        :param int limit: The maximum number of records to return.
        :param int offset: An optional results offset. Defaults to 0.
        :param str rating: Filters results by specified rating.
        :param str lang: Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages <a href = \"../language-support\">here</a>.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'q', 'limit', 'offset', 'rating', 'lang', 'fmt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stickers_search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `stickers_search_get`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `stickers_search_get`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `stickers_search_get`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `stickers_search_get`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] > 100:
            raise ValueError("Invalid value for parameter `offset` when calling `stickers_search_get`, must be a value less than or equal to `100`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `stickers_search_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/stickers/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'q' in params:
            query_params['q'] = params['q']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'rating' in params:
            query_params['rating'] = params['rating']
        if 'lang' in params:
            query_params['lang'] = params['lang']
        if 'fmt' in params:
            query_params['fmt'] = params['fmt']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stickers_translate_get(self, api_key, s, **kwargs):
        """
        Sticker Translate Endpoint
        The translate API draws on search, but uses the Giphy `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_translate_get(api_key, s, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str s: Search term. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stickers_translate_get_with_http_info(api_key, s, **kwargs)
        else:
            (data) = self.stickers_translate_get_with_http_info(api_key, s, **kwargs)
            return data

    def stickers_translate_get_with_http_info(self, api_key, s, **kwargs):
        """
        Sticker Translate Endpoint
        The translate API draws on search, but uses the Giphy `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_translate_get_with_http_info(api_key, s, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param str s: Search term. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 's']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stickers_translate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `stickers_translate_get`")
        # verify the required parameter 's' is set
        if ('s' not in params) or (params['s'] is None):
            raise ValueError("Missing the required parameter `s` when calling `stickers_translate_get`")


        collection_formats = {}

        resource_path = '/stickers/translate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 's' in params:
            query_params['s'] = params['s']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stickers_trending_get(self, api_key, **kwargs):
        """
        Trending Stickers Endpoint
        Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team. The data returned mirrors the GIFs showcased on the <a href = \"http://www.giphy.com\">GIPHY homepage</a>. Returns 25 results by default.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_trending_get(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param int limit: The maximum number of records to return.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stickers_trending_get_with_http_info(api_key, **kwargs)
        else:
            (data) = self.stickers_trending_get_with_http_info(api_key, **kwargs)
            return data

    def stickers_trending_get_with_http_info(self, api_key, **kwargs):
        """
        Trending Stickers Endpoint
        Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team. The data returned mirrors the GIFs showcased on the <a href = \"http://www.giphy.com\">GIPHY homepage</a>. Returns 25 results by default.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stickers_trending_get_with_http_info(api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_key: Giphy API Key. (required)
        :param int limit: The maximum number of records to return.
        :param str rating: Filters results by specified rating.
        :param str fmt: Used to indicate the expected response format. Default is Json.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'limit', 'rating', 'fmt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stickers_trending_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `stickers_trending_get`")

        if 'limit' in params and params['limit'] > 100:
            raise ValueError("Invalid value for parameter `limit` when calling `stickers_trending_get`, must be a value less than or equal to `100`")
        if 'limit' in params and params['limit'] < 1:
            raise ValueError("Invalid value for parameter `limit` when calling `stickers_trending_get`, must be a value greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/stickers/trending'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'api_key' in params:
            query_params['api_key'] = params['api_key']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'rating' in params:
            query_params['rating'] = params['rating']
        if 'fmt' in params:
            query_params['fmt'] = params['fmt']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
