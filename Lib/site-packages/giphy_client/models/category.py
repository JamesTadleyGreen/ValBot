# coding: utf-8
#
# Created by David Hargat.
# Copyright Â© 2017 Giphy. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""
    giphy-api

    Giphy's public api.

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Category(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, name_encoded=None, subcategories=None, gif=None):
        """
        Category - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'name_encoded': 'str',
            'subcategories': 'list[ShallowTag]',
            'gif': 'Gif'
        }

        self.attribute_map = {
            'name': 'name',
            'name_encoded': 'name_encoded',
            'subcategories': 'subcategories',
            'gif': 'gif'
        }

        self._name = name
        self._name_encoded = name_encoded
        self._subcategories = subcategories
        self._gif = gif

    @property
    def name(self):
        """
        Gets the name of this Category.
        Category name

        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Category.
        Category name

        :param name: The name of this Category.
        :type: str
        """

        self._name = name

    @property
    def name_encoded(self):
        """
        Gets the name_encoded of this Category.
        Category name, with dashes '-' instead of spaces ' '.

        :return: The name_encoded of this Category.
        :rtype: str
        """
        return self._name_encoded

    @name_encoded.setter
    def name_encoded(self, name_encoded):
        """
        Sets the name_encoded of this Category.
        Category name, with dashes '-' instead of spaces ' '.

        :param name_encoded: The name_encoded of this Category.
        :type: str
        """

        self._name_encoded = name_encoded

    @property
    def subcategories(self):
        """
        Gets the subcategories of this Category.
        subcategories are tags for a given category. Use them with the `/gifs/categories/:category/:tag` endpoint

        :return: The subcategories of this Category.
        :rtype: list[ShallowTag]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """
        Sets the subcategories of this Category.
        subcategories are tags for a given category. Use them with the `/gifs/categories/:category/:tag` endpoint

        :param subcategories: The subcategories of this Category.
        :type: list[ShallowTag]
        """

        self._subcategories = subcategories

    @property
    def gif(self):
        """
        Gets the gif of this Category.
        A gif which can be used as the icon for this category.

        :return: The gif of this Category.
        :rtype: Gif
        """
        return self._gif

    @gif.setter
    def gif(self, gif):
        """
        Sets the gif of this Category.
        A gif which can be used as the icon for this category.

        :param gif: The gif of this Category.
        :type: Gif
        """

        self._gif = gif

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
