# coding: utf-8
#
# Created by David Hargat.
# Copyright Â© 2017 Giphy. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""
    giphy-api

    Giphy's public api.

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LastChildModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type='channel', id=None, parent=None, create_datetime=None, breadcrumbs=None, username=None, slug=None, title=None, short_title=None, description=None, featured_gif=None, banner_image=None, avatar_image=None, screensaver_gif=None, is_private=None, is_live=None, event_start_datetime=None, event_end_datetime=None, has_children=None, url=None, website_url=None, instagram_url=None, twitter_url=None, facebook_url=None, pinterest_url=None, tumblr_url=None, user=None, trending_tags=None, gifs=None, children=None):
        """
        LastChildModel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'id': 'int',
            'parent': 'str',
            'create_datetime': 'str',
            'breadcrumbs': 'list[Breadcrumb]',
            'username': 'str',
            'slug': 'str',
            'title': 'str',
            'short_title': 'str',
            'description': 'str',
            'featured_gif': 'Gif',
            'banner_image': 'str',
            'avatar_image': 'str',
            'screensaver_gif': 'Gif',
            'is_private': 'bool',
            'is_live': 'bool',
            'event_start_datetime': 'str',
            'event_end_datetime': 'str',
            'has_children': 'bool',
            'url': 'str',
            'website_url': 'str',
            'instagram_url': 'str',
            'twitter_url': 'str',
            'facebook_url': 'str',
            'pinterest_url': 'str',
            'tumblr_url': 'str',
            'user': 'User',
            'trending_tags': 'list[TrendingTag]',
            'gifs': 'BaseChannelModelGifs',
            'children': 'LastChildModelChildren'
        }

        self.attribute_map = {
            'type': 'type',
            'id': 'id',
            'parent': 'parent',
            'create_datetime': 'create_datetime',
            'breadcrumbs': 'breadcrumbs',
            'username': 'username',
            'slug': 'slug',
            'title': 'title',
            'short_title': 'short_title',
            'description': 'description',
            'featured_gif': 'featured_gif',
            'banner_image': 'banner_image',
            'avatar_image': 'avatar_image',
            'screensaver_gif': 'screensaver_gif',
            'is_private': 'is_private',
            'is_live': 'is_live',
            'event_start_datetime': 'event_start_datetime',
            'event_end_datetime': 'event_end_datetime',
            'has_children': 'has_children',
            'url': 'url',
            'website_url': 'website_url',
            'instagram_url': 'instagram_url',
            'twitter_url': 'twitter_url',
            'facebook_url': 'facebook_url',
            'pinterest_url': 'pinterest_url',
            'tumblr_url': 'tumblr_url',
            'user': 'user',
            'trending_tags': 'trending_tags',
            'gifs': 'gifs',
            'children': 'children'
        }

        self._type = type
        self._id = id
        self._parent = parent
        self._create_datetime = create_datetime
        self._breadcrumbs = breadcrumbs
        self._username = username
        self._slug = slug
        self._title = title
        self._short_title = short_title
        self._description = description
        self._featured_gif = featured_gif
        self._banner_image = banner_image
        self._avatar_image = avatar_image
        self._screensaver_gif = screensaver_gif
        self._is_private = is_private
        self._is_live = is_live
        self._event_start_datetime = event_start_datetime
        self._event_end_datetime = event_end_datetime
        self._has_children = has_children
        self._url = url
        self._website_url = website_url
        self._instagram_url = instagram_url
        self._twitter_url = twitter_url
        self._facebook_url = facebook_url
        self._pinterest_url = pinterest_url
        self._tumblr_url = tumblr_url
        self._user = user
        self._trending_tags = trending_tags
        self._gifs = gifs
        self._children = children

    @property
    def type(self):
        """
        Gets the type of this LastChildModel.
        Always \"channel\"

        :return: The type of this LastChildModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this LastChildModel.
        Always \"channel\"

        :param type: The type of this LastChildModel.
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this LastChildModel.
        123

        :return: The id of this LastChildModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LastChildModel.
        123

        :param id: The id of this LastChildModel.
        :type: int
        """

        self._id = id

    @property
    def parent(self):
        """
        Gets the parent of this LastChildModel.
        parent's slug

        :return: The parent of this LastChildModel.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this LastChildModel.
        parent's slug

        :param parent: The parent of this LastChildModel.
        :type: str
        """

        self._parent = parent

    @property
    def create_datetime(self):
        """
        Gets the create_datetime of this LastChildModel.
        xyz

        :return: The create_datetime of this LastChildModel.
        :rtype: str
        """
        return self._create_datetime

    @create_datetime.setter
    def create_datetime(self, create_datetime):
        """
        Sets the create_datetime of this LastChildModel.
        xyz

        :param create_datetime: The create_datetime of this LastChildModel.
        :type: str
        """

        self._create_datetime = create_datetime

    @property
    def breadcrumbs(self):
        """
        Gets the breadcrumbs of this LastChildModel.

        :return: The breadcrumbs of this LastChildModel.
        :rtype: list[Breadcrumb]
        """
        return self._breadcrumbs

    @breadcrumbs.setter
    def breadcrumbs(self, breadcrumbs):
        """
        Sets the breadcrumbs of this LastChildModel.

        :param breadcrumbs: The breadcrumbs of this LastChildModel.
        :type: list[Breadcrumb]
        """

        self._breadcrumbs = breadcrumbs

    @property
    def username(self):
        """
        Gets the username of this LastChildModel.
        xyz

        :return: The username of this LastChildModel.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this LastChildModel.
        xyz

        :param username: The username of this LastChildModel.
        :type: str
        """

        self._username = username

    @property
    def slug(self):
        """
        Gets the slug of this LastChildModel.

        :return: The slug of this LastChildModel.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this LastChildModel.

        :param slug: The slug of this LastChildModel.
        :type: str
        """

        self._slug = slug

    @property
    def title(self):
        """
        Gets the title of this LastChildModel.
        xyz

        :return: The title of this LastChildModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this LastChildModel.
        xyz

        :param title: The title of this LastChildModel.
        :type: str
        """

        self._title = title

    @property
    def short_title(self):
        """
        Gets the short_title of this LastChildModel.
        xyz

        :return: The short_title of this LastChildModel.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """
        Sets the short_title of this LastChildModel.
        xyz

        :param short_title: The short_title of this LastChildModel.
        :type: str
        """

        self._short_title = short_title

    @property
    def description(self):
        """
        Gets the description of this LastChildModel.
        xyz

        :return: The description of this LastChildModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LastChildModel.
        xyz

        :param description: The description of this LastChildModel.
        :type: str
        """

        self._description = description

    @property
    def featured_gif(self):
        """
        Gets the featured_gif of this LastChildModel.

        :return: The featured_gif of this LastChildModel.
        :rtype: Gif
        """
        return self._featured_gif

    @featured_gif.setter
    def featured_gif(self, featured_gif):
        """
        Sets the featured_gif of this LastChildModel.

        :param featured_gif: The featured_gif of this LastChildModel.
        :type: Gif
        """

        self._featured_gif = featured_gif

    @property
    def banner_image(self):
        """
        Gets the banner_image of this LastChildModel.
        xyz

        :return: The banner_image of this LastChildModel.
        :rtype: str
        """
        return self._banner_image

    @banner_image.setter
    def banner_image(self, banner_image):
        """
        Sets the banner_image of this LastChildModel.
        xyz

        :param banner_image: The banner_image of this LastChildModel.
        :type: str
        """

        self._banner_image = banner_image

    @property
    def avatar_image(self):
        """
        Gets the avatar_image of this LastChildModel.
        xyz

        :return: The avatar_image of this LastChildModel.
        :rtype: str
        """
        return self._avatar_image

    @avatar_image.setter
    def avatar_image(self, avatar_image):
        """
        Sets the avatar_image of this LastChildModel.
        xyz

        :param avatar_image: The avatar_image of this LastChildModel.
        :type: str
        """

        self._avatar_image = avatar_image

    @property
    def screensaver_gif(self):
        """
        Gets the screensaver_gif of this LastChildModel.

        :return: The screensaver_gif of this LastChildModel.
        :rtype: Gif
        """
        return self._screensaver_gif

    @screensaver_gif.setter
    def screensaver_gif(self, screensaver_gif):
        """
        Sets the screensaver_gif of this LastChildModel.

        :param screensaver_gif: The screensaver_gif of this LastChildModel.
        :type: Gif
        """

        self._screensaver_gif = screensaver_gif

    @property
    def is_private(self):
        """
        Gets the is_private of this LastChildModel.

        :return: The is_private of this LastChildModel.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """
        Sets the is_private of this LastChildModel.

        :param is_private: The is_private of this LastChildModel.
        :type: bool
        """

        self._is_private = is_private

    @property
    def is_live(self):
        """
        Gets the is_live of this LastChildModel.

        :return: The is_live of this LastChildModel.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """
        Sets the is_live of this LastChildModel.

        :param is_live: The is_live of this LastChildModel.
        :type: bool
        """

        self._is_live = is_live

    @property
    def event_start_datetime(self):
        """
        Gets the event_start_datetime of this LastChildModel.
        xyz

        :return: The event_start_datetime of this LastChildModel.
        :rtype: str
        """
        return self._event_start_datetime

    @event_start_datetime.setter
    def event_start_datetime(self, event_start_datetime):
        """
        Sets the event_start_datetime of this LastChildModel.
        xyz

        :param event_start_datetime: The event_start_datetime of this LastChildModel.
        :type: str
        """

        self._event_start_datetime = event_start_datetime

    @property
    def event_end_datetime(self):
        """
        Gets the event_end_datetime of this LastChildModel.
        xyz

        :return: The event_end_datetime of this LastChildModel.
        :rtype: str
        """
        return self._event_end_datetime

    @event_end_datetime.setter
    def event_end_datetime(self, event_end_datetime):
        """
        Sets the event_end_datetime of this LastChildModel.
        xyz

        :param event_end_datetime: The event_end_datetime of this LastChildModel.
        :type: str
        """

        self._event_end_datetime = event_end_datetime

    @property
    def has_children(self):
        """
        Gets the has_children of this LastChildModel.

        :return: The has_children of this LastChildModel.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """
        Sets the has_children of this LastChildModel.

        :param has_children: The has_children of this LastChildModel.
        :type: bool
        """

        self._has_children = has_children

    @property
    def url(self):
        """
        Gets the url of this LastChildModel.
        xyz

        :return: The url of this LastChildModel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this LastChildModel.
        xyz

        :param url: The url of this LastChildModel.
        :type: str
        """

        self._url = url

    @property
    def website_url(self):
        """
        Gets the website_url of this LastChildModel.
        xyz

        :return: The website_url of this LastChildModel.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """
        Sets the website_url of this LastChildModel.
        xyz

        :param website_url: The website_url of this LastChildModel.
        :type: str
        """

        self._website_url = website_url

    @property
    def instagram_url(self):
        """
        Gets the instagram_url of this LastChildModel.
        xyz

        :return: The instagram_url of this LastChildModel.
        :rtype: str
        """
        return self._instagram_url

    @instagram_url.setter
    def instagram_url(self, instagram_url):
        """
        Sets the instagram_url of this LastChildModel.
        xyz

        :param instagram_url: The instagram_url of this LastChildModel.
        :type: str
        """

        self._instagram_url = instagram_url

    @property
    def twitter_url(self):
        """
        Gets the twitter_url of this LastChildModel.
        xyz

        :return: The twitter_url of this LastChildModel.
        :rtype: str
        """
        return self._twitter_url

    @twitter_url.setter
    def twitter_url(self, twitter_url):
        """
        Sets the twitter_url of this LastChildModel.
        xyz

        :param twitter_url: The twitter_url of this LastChildModel.
        :type: str
        """

        self._twitter_url = twitter_url

    @property
    def facebook_url(self):
        """
        Gets the facebook_url of this LastChildModel.
        xyz

        :return: The facebook_url of this LastChildModel.
        :rtype: str
        """
        return self._facebook_url

    @facebook_url.setter
    def facebook_url(self, facebook_url):
        """
        Sets the facebook_url of this LastChildModel.
        xyz

        :param facebook_url: The facebook_url of this LastChildModel.
        :type: str
        """

        self._facebook_url = facebook_url

    @property
    def pinterest_url(self):
        """
        Gets the pinterest_url of this LastChildModel.
        xyz

        :return: The pinterest_url of this LastChildModel.
        :rtype: str
        """
        return self._pinterest_url

    @pinterest_url.setter
    def pinterest_url(self, pinterest_url):
        """
        Sets the pinterest_url of this LastChildModel.
        xyz

        :param pinterest_url: The pinterest_url of this LastChildModel.
        :type: str
        """

        self._pinterest_url = pinterest_url

    @property
    def tumblr_url(self):
        """
        Gets the tumblr_url of this LastChildModel.
        xyz

        :return: The tumblr_url of this LastChildModel.
        :rtype: str
        """
        return self._tumblr_url

    @tumblr_url.setter
    def tumblr_url(self, tumblr_url):
        """
        Sets the tumblr_url of this LastChildModel.
        xyz

        :param tumblr_url: The tumblr_url of this LastChildModel.
        :type: str
        """

        self._tumblr_url = tumblr_url

    @property
    def user(self):
        """
        Gets the user of this LastChildModel.

        :return: The user of this LastChildModel.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this LastChildModel.

        :param user: The user of this LastChildModel.
        :type: User
        """

        self._user = user

    @property
    def trending_tags(self):
        """
        Gets the trending_tags of this LastChildModel.

        :return: The trending_tags of this LastChildModel.
        :rtype: list[TrendingTag]
        """
        return self._trending_tags

    @trending_tags.setter
    def trending_tags(self, trending_tags):
        """
        Sets the trending_tags of this LastChildModel.

        :param trending_tags: The trending_tags of this LastChildModel.
        :type: list[TrendingTag]
        """

        self._trending_tags = trending_tags

    @property
    def gifs(self):
        """
        Gets the gifs of this LastChildModel.

        :return: The gifs of this LastChildModel.
        :rtype: BaseChannelModelGifs
        """
        return self._gifs

    @gifs.setter
    def gifs(self, gifs):
        """
        Sets the gifs of this LastChildModel.

        :param gifs: The gifs of this LastChildModel.
        :type: BaseChannelModelGifs
        """

        self._gifs = gifs

    @property
    def children(self):
        """
        Gets the children of this LastChildModel.

        :return: The children of this LastChildModel.
        :rtype: LastChildModelChildren
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this LastChildModel.

        :param children: The children of this LastChildModel.
        :type: LastChildModelChildren
        """

        self._children = children

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LastChildModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
