# coding: utf-8
#
# Created by David Hargat.
# Copyright Â© 2017 Giphy. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

"""
    giphy-api

    Giphy's public api.

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, avatar_url=None, banner_url=None, profile_url=None, username=None, display_name=None, twitter=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'avatar_url': 'str',
            'banner_url': 'str',
            'profile_url': 'str',
            'username': 'str',
            'display_name': 'str',
            'twitter': 'str'
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'banner_url': 'banner_url',
            'profile_url': 'profile_url',
            'username': 'username',
            'display_name': 'display_name',
            'twitter': 'twitter'
        }

        self._avatar_url = avatar_url
        self._banner_url = banner_url
        self._profile_url = profile_url
        self._username = username
        self._display_name = display_name
        self._twitter = twitter

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this User.
        The URL for this user's avatar image.

        :return: The avatar_url of this User.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this User.
        The URL for this user's avatar image.

        :param avatar_url: The avatar_url of this User.
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def banner_url(self):
        """
        Gets the banner_url of this User.
        The URL for the banner image that appears atop this user's profile page.

        :return: The banner_url of this User.
        :rtype: str
        """
        return self._banner_url

    @banner_url.setter
    def banner_url(self, banner_url):
        """
        Sets the banner_url of this User.
        The URL for the banner image that appears atop this user's profile page.

        :param banner_url: The banner_url of this User.
        :type: str
        """

        self._banner_url = banner_url

    @property
    def profile_url(self):
        """
        Gets the profile_url of this User.
        The URL for this user's profile.

        :return: The profile_url of this User.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """
        Sets the profile_url of this User.
        The URL for this user's profile.

        :param profile_url: The profile_url of this User.
        :type: str
        """

        self._profile_url = profile_url

    @property
    def username(self):
        """
        Gets the username of this User.
        The username associated with this user.

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this User.
        The username associated with this user.

        :param username: The username of this User.
        :type: str
        """

        self._username = username

    @property
    def display_name(self):
        """
        Gets the display_name of this User.
        The display name associated with this user (contains formatting the base username might not).

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this User.
        The display name associated with this user (contains formatting the base username might not).

        :param display_name: The display_name of this User.
        :type: str
        """

        self._display_name = display_name

    @property
    def twitter(self):
        """
        Gets the twitter of this User.
        The Twitter username associated with this user, if applicable.

        :return: The twitter of this User.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """
        Sets the twitter of this User.
        The Twitter username associated with this user, if applicable.

        :param twitter: The twitter of this User.
        :type: str
        """

        self._twitter = twitter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
